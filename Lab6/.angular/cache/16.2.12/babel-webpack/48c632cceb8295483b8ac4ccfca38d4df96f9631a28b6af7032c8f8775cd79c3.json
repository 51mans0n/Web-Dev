{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AlbumsService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.BASE_URL = 'https://jsonplaceholder.typicode.com';\n  }\n  getAlbums() {\n    const localAlbums = localStorage.getItem('albums');\n    if (localAlbums) {\n      return of(JSON.parse(localAlbums));\n    } else {\n      return this.httpClient.get(`${this.BASE_URL}/albums`);\n    }\n  }\n  getAlbum(id) {\n    return this.httpClient.get(`${this.BASE_URL}/albums/${id}`);\n  }\n  addAlbum(album) {\n    return this.httpClient.post(`${this.BASE_URL}/albums`, album).pipe(tap(newAlbum => {\n      // После успешного добавления альбома сохраняем данные в localStorage\n      const localAlbums = JSON.parse(localStorage.getItem('albums') || '[]');\n      localAlbums.unshift(newAlbum);\n      localStorage.setItem('albums', JSON.stringify(localAlbums));\n    }));\n  }\n  deleteAlbum(id) {\n    return this.httpClient.delete(`${this.BASE_URL}/albums/${id}`);\n  }\n  updateAlbum(albumId, newTitle) {\n    const body = {\n      title: newTitle\n    };\n    console.log(newTitle);\n    return this.httpClient.put(`${this.BASE_URL}/albums/${albumId}`, body);\n  }\n  getAlbumPhotos(id) {\n    return this.httpClient.get(`${this.BASE_URL}/albums/${id}/photos`);\n  }\n  static #_ = this.ɵfac = function AlbumsService_Factory(t) {\n    return new (t || AlbumsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlbumsService,\n    factory: AlbumsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","tap","AlbumsService","constructor","httpClient","BASE_URL","getAlbums","localAlbums","localStorage","getItem","JSON","parse","get","getAlbum","id","addAlbum","album","post","pipe","newAlbum","unshift","setItem","stringify","deleteAlbum","delete","updateAlbum","albumId","newTitle","body","title","console","log","put","getAlbumPhotos","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Simso\\Documents\\MyProjects\\Web-Dev\\Lab6\\src\\app\\_services\\albums.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Album } from '../_models/album-model';\r\nimport { AlbumPhoto } from '../_models/album-photo-model';\r\nimport { of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlbumsService {\r\n  BASE_URL = 'https://jsonplaceholder.typicode.com';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getAlbums() {\r\n    const localAlbums = localStorage.getItem('albums');\r\n    if (localAlbums) {\r\n      return of(JSON.parse(localAlbums));\r\n    } else {\r\n      return this.httpClient.get<Album[]>(`${this.BASE_URL}/albums`);\r\n    }\r\n  }\r\n\r\n  getAlbum(id: number) {\r\n    return this.httpClient.get<Album>(`${this.BASE_URL}/albums/${id}`);\r\n  }\r\n\r\n  addAlbum(album: Album) {\r\n    return this.httpClient.post<Album>(`${this.BASE_URL}/albums`, album).pipe(\r\n        tap(newAlbum => {\r\n          // После успешного добавления альбома сохраняем данные в localStorage\r\n          const localAlbums = JSON.parse(localStorage.getItem('albums') || '[]');\r\n          localAlbums.unshift(newAlbum);\r\n          localStorage.setItem('albums', JSON.stringify(localAlbums));\r\n        })\r\n    );\r\n  }\r\n\r\n  deleteAlbum(id: number) {\r\n    return this.httpClient.delete<Album>(`${this.BASE_URL}/albums/${id}`);\r\n  }\r\n\r\n  updateAlbum(albumId: number, newTitle: string) {\r\n    const body = { title: newTitle };\r\n    console.log(newTitle);\r\n    return this.httpClient.put<Album>(`${this.BASE_URL}/albums/${albumId}`, body);\r\n  }\r\n\r\n  getAlbumPhotos(id: number) {\r\n    return this.httpClient.get<AlbumPhoto[]>(`${this.BASE_URL}/albums/${id}/photos`);\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAASA,EAAE,QAAQ,MAAM;AACzB,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAF9B,KAAAC,QAAQ,GAAG,sCAAsC;EAEH;EAE9CC,SAASA,CAAA;IACP,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAClD,IAAIF,WAAW,EAAE;MACf,OAAOP,EAAE,CAACU,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,CAAC;KACnC,MAAM;MACL,OAAO,IAAI,CAACH,UAAU,CAACQ,GAAG,CAAU,GAAG,IAAI,CAACP,QAAQ,SAAS,CAAC;;EAElE;EAEAQ,QAAQA,CAACC,EAAU;IACjB,OAAO,IAAI,CAACV,UAAU,CAACQ,GAAG,CAAQ,GAAG,IAAI,CAACP,QAAQ,WAAWS,EAAE,EAAE,CAAC;EACpE;EAEAC,QAAQA,CAACC,KAAY;IACnB,OAAO,IAAI,CAACZ,UAAU,CAACa,IAAI,CAAQ,GAAG,IAAI,CAACZ,QAAQ,SAAS,EAAEW,KAAK,CAAC,CAACE,IAAI,CACrEjB,GAAG,CAACkB,QAAQ,IAAG;MACb;MACA,MAAMZ,WAAW,GAAGG,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;MACtEF,WAAW,CAACa,OAAO,CAACD,QAAQ,CAAC;MAC7BX,YAAY,CAACa,OAAO,CAAC,QAAQ,EAAEX,IAAI,CAACY,SAAS,CAACf,WAAW,CAAC,CAAC;IAC7D,CAAC,CAAC,CACL;EACH;EAEAgB,WAAWA,CAACT,EAAU;IACpB,OAAO,IAAI,CAACV,UAAU,CAACoB,MAAM,CAAQ,GAAG,IAAI,CAACnB,QAAQ,WAAWS,EAAE,EAAE,CAAC;EACvE;EAEAW,WAAWA,CAACC,OAAe,EAAEC,QAAgB;IAC3C,MAAMC,IAAI,GAAG;MAAEC,KAAK,EAAEF;IAAQ,CAAE;IAChCG,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACrB,OAAO,IAAI,CAACvB,UAAU,CAAC4B,GAAG,CAAQ,GAAG,IAAI,CAAC3B,QAAQ,WAAWqB,OAAO,EAAE,EAAEE,IAAI,CAAC;EAC/E;EAEAK,cAAcA,CAACnB,EAAU;IACvB,OAAO,IAAI,CAACV,UAAU,CAACQ,GAAG,CAAe,GAAG,IAAI,CAACP,QAAQ,WAAWS,EAAE,SAAS,CAAC;EAClF;EAAC,QAAAoB,CAAA,G;qBAzCUhC,aAAa,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbrC,aAAa;IAAAsC,OAAA,EAAbtC,aAAa,CAAAuC,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AlbumsService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.BASE_URL = 'https://jsonplaceholder.typicode.com';\n  }\n  getAlbums() {\n    const localAlbums = localStorage.getItem('albums');\n    if (localAlbums) {\n      // Возвращаем альбомы из localStorage.\n      this.albums = JSON.parse(localAlbums);\n      return of(this.albums);\n    } else {\n      // Если в localStorage нет альбомов, делаем запрос к jsonplaceholder.\n      return this.httpClient.get(`${this.BASE_URL}/albums`).pipe(tap(albums => {\n        // Сохраняем полученные альбомы в localStorage.\n        localStorage.setItem('albums', JSON.stringify(albums));\n        // Обновляем состояние локального компонента.\n        this.albums = albums;\n      }));\n    }\n  }\n  getAlbum(id) {\n    return this.httpClient.get(`${this.BASE_URL}/albums/${id}`);\n  }\n  addAlbum(album) {\n    // Эмулируем ID, добавляя текущее время. В реальном приложении ID должен генерировать сервер.\n    album.id = new Date().getTime();\n    // Получаем список альбомов из localStorage, или, если его нет, то пустой массив.\n    const localAlbums = JSON.parse(localStorage.getItem('albums') || '[]');\n    // Добавляем новый альбом в начало массива.\n    localAlbums.unshift(album);\n    // Сохраняем обновленный массив альбомов обратно в localStorage.\n    localStorage.setItem('albums', JSON.stringify(localAlbums));\n    // Возвращаем Observable нового альбома.\n    return of(album);\n  }\n  deleteAlbum(id) {\n    return this.httpClient.delete(`${this.BASE_URL}/albums/${id}`);\n  }\n  updateAlbum(albumId, newTitle) {\n    const body = {\n      title: newTitle\n    };\n    console.log(newTitle);\n    return this.httpClient.put(`${this.BASE_URL}/albums/${albumId}`, body);\n  }\n  getAlbumPhotos(id) {\n    return this.httpClient.get(`${this.BASE_URL}/albums/${id}/photos`);\n  }\n  static #_ = this.ɵfac = function AlbumsService_Factory(t) {\n    return new (t || AlbumsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlbumsService,\n    factory: AlbumsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","tap","AlbumsService","constructor","httpClient","BASE_URL","getAlbums","localAlbums","localStorage","getItem","albums","JSON","parse","get","pipe","setItem","stringify","getAlbum","id","addAlbum","album","Date","getTime","unshift","deleteAlbum","delete","updateAlbum","albumId","newTitle","body","title","console","log","put","getAlbumPhotos","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Simso\\Documents\\MyProjects\\Web-Dev\\Lab6\\src\\app\\_services\\albums.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Album } from '../_models/album-model';\r\nimport { AlbumPhoto } from '../_models/album-photo-model';\r\nimport { of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlbumsService {\r\n  BASE_URL = 'https://jsonplaceholder.typicode.com';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getAlbums() {\r\n    const localAlbums = localStorage.getItem('albums');\r\n    if (localAlbums) {\r\n      // Возвращаем альбомы из localStorage.\r\n      this.albums = JSON.parse(localAlbums);\r\n      return of(this.albums);\r\n    } else {\r\n      // Если в localStorage нет альбомов, делаем запрос к jsonplaceholder.\r\n      return this.httpClient.get<Album[]>(`${this.BASE_URL}/albums`).pipe(\r\n          tap(albums => {\r\n            // Сохраняем полученные альбомы в localStorage.\r\n            localStorage.setItem('albums', JSON.stringify(albums));\r\n            // Обновляем состояние локального компонента.\r\n            this.albums = albums;\r\n          })\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  getAlbum(id: number) {\r\n    return this.httpClient.get<Album>(`${this.BASE_URL}/albums/${id}`);\r\n  }\r\n\r\n  addAlbum(album: Album) {\r\n    // Эмулируем ID, добавляя текущее время. В реальном приложении ID должен генерировать сервер.\r\n    album.id = new Date().getTime();\r\n    // Получаем список альбомов из localStorage, или, если его нет, то пустой массив.\r\n    const localAlbums = JSON.parse(localStorage.getItem('albums') || '[]');\r\n    // Добавляем новый альбом в начало массива.\r\n    localAlbums.unshift(album);\r\n    // Сохраняем обновленный массив альбомов обратно в localStorage.\r\n    localStorage.setItem('albums', JSON.stringify(localAlbums));\r\n    // Возвращаем Observable нового альбома.\r\n    return of(album);\r\n  }\r\n\r\n\r\n  deleteAlbum(id: number) {\r\n    return this.httpClient.delete<Album>(`${this.BASE_URL}/albums/${id}`);\r\n  }\r\n\r\n  updateAlbum(albumId: number, newTitle: string) {\r\n    const body = { title: newTitle };\r\n    console.log(newTitle);\r\n    return this.httpClient.put<Album>(`${this.BASE_URL}/albums/${albumId}`, body);\r\n  }\r\n\r\n  getAlbumPhotos(id: number) {\r\n    return this.httpClient.get<AlbumPhoto[]>(`${this.BASE_URL}/albums/${id}/photos`);\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAASA,EAAE,QAAQ,MAAM;AACzB,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAF9B,KAAAC,QAAQ,GAAG,sCAAsC;EAEH;EAE9CC,SAASA,CAAA;IACP,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAClD,IAAIF,WAAW,EAAE;MACf;MACA,IAAI,CAACG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;MACrC,OAAOP,EAAE,CAAC,IAAI,CAACU,MAAM,CAAC;KACvB,MAAM;MACL;MACA,OAAO,IAAI,CAACN,UAAU,CAACS,GAAG,CAAU,GAAG,IAAI,CAACR,QAAQ,SAAS,CAAC,CAACS,IAAI,CAC/Db,GAAG,CAACS,MAAM,IAAG;QACX;QACAF,YAAY,CAACO,OAAO,CAAC,QAAQ,EAAEJ,IAAI,CAACK,SAAS,CAACN,MAAM,CAAC,CAAC;QACtD;QACA,IAAI,CAACA,MAAM,GAAGA,MAAM;MACtB,CAAC,CAAC,CACL;;EAEL;EAGAO,QAAQA,CAACC,EAAU;IACjB,OAAO,IAAI,CAACd,UAAU,CAACS,GAAG,CAAQ,GAAG,IAAI,CAACR,QAAQ,WAAWa,EAAE,EAAE,CAAC;EACpE;EAEAC,QAAQA,CAACC,KAAY;IACnB;IACAA,KAAK,CAACF,EAAE,GAAG,IAAIG,IAAI,EAAE,CAACC,OAAO,EAAE;IAC/B;IACA,MAAMf,WAAW,GAAGI,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;IACtE;IACAF,WAAW,CAACgB,OAAO,CAACH,KAAK,CAAC;IAC1B;IACAZ,YAAY,CAACO,OAAO,CAAC,QAAQ,EAAEJ,IAAI,CAACK,SAAS,CAACT,WAAW,CAAC,CAAC;IAC3D;IACA,OAAOP,EAAE,CAACoB,KAAK,CAAC;EAClB;EAGAI,WAAWA,CAACN,EAAU;IACpB,OAAO,IAAI,CAACd,UAAU,CAACqB,MAAM,CAAQ,GAAG,IAAI,CAACpB,QAAQ,WAAWa,EAAE,EAAE,CAAC;EACvE;EAEAQ,WAAWA,CAACC,OAAe,EAAEC,QAAgB;IAC3C,MAAMC,IAAI,GAAG;MAAEC,KAAK,EAAEF;IAAQ,CAAE;IAChCG,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACrB,OAAO,IAAI,CAACxB,UAAU,CAAC6B,GAAG,CAAQ,GAAG,IAAI,CAAC5B,QAAQ,WAAWsB,OAAO,EAAE,EAAEE,IAAI,CAAC;EAC/E;EAEAK,cAAcA,CAAChB,EAAU;IACvB,OAAO,IAAI,CAACd,UAAU,CAACS,GAAG,CAAe,GAAG,IAAI,CAACR,QAAQ,WAAWa,EAAE,SAAS,CAAC;EAClF;EAAC,QAAAiB,CAAA,G;qBAvDUjC,aAAa,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbtC,aAAa;IAAAuC,OAAA,EAAbvC,aAAa,CAAAwC,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}